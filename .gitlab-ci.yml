stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

# ------------GENERAL_TEMPLATES_START------------
.app-vars:
  variables:
    SOURCE_CODE_PATH: ./MovieAppAPI

.filler-vars:
  variables:
    SOURCE_CODE_PATH: ./DatabaseFill
# ------------GENERAL_TEMPLATES_END------------

# ------------BUILD_TEMPLATES_START------------
.docker-dotnet-build:
  variables:
    VERSION_TAG: v1.0.0
    LATEST_TAG: latest
    IMAGE_NAME_VERSION: vladovello/dotnet-movie-app-api:$VERSION_TAG
    IMAGE_NAME_LATEST: vladovello/dotnet-movie-app-api:$LATEST_TAG
    BINARY_NAME: SomeDll.dll
  tags:
    - build
  before_script:
    - docker login -u $REGISTRY_LOGIN -p $REGISTRY_PASSWORD
  script:
    - echo "Building the app with job $CI_JOB_NAME"
    - docker compose build -t $IMAGE_NAME_LATEST -t $IMAGE_NAME_VERSION .
    - docker push $IMAGE_NAME_LATEST
    - docker push $IMAGE_NAME_VERSION
    - docker compose cp app:/app/$BINARY_NAME .
  artifacts:
    name: $BINARY_NAME
    paths:
      - $BINARY_NAME
    expire_in: 30 mins
  
.dotnet-build:
  variables:
    SOURCE_CODE_PATH: .
    BUILD_DIR: $SOURCE_CODE_PATH/bin/Release/net6.0
    BINARY_NAME: SomeDll.dll
  tags:
    - build
  script:
    - echo "Building the app with job $CI_JOB_NAME"
    - dotnet build $SOURCE_CODE_PATH -c Release -o $BUILD_DIR
  artifacts:
    name: $BINARY_NAME
    paths:
      - $BUILD_DIR/$BINARY_NAME
    expire_in: 30 mins

.build-filler-vars:
  extends:
    - .filler-vars
  variables:
    BINARY_NAME: DatabaseFill.dll
# ------------BUILD_TEMPLATES_END------------

# ------------BUILD_START------------
build-app-job:       # This job runs in the build stage, which runs first.
  stage: build
  variables:
    BINARY_NAME: MovieAppAPI.dll
  extends:
    - .docker-dotnet-build

build-filler-job:
  # image: mcr.microsoft.com/dotnet/sdk:6.0-alpine-amd64
  stage: build
  extends:
    - .dotnet-build
    - .build-filler-vars
  script:
    - echo "Building the app with job $CI_JOB_NAME"
    - dotnet build --configuration Release $SOURCE_CODE_PATH
# ------------BUILD_END------------

# ------------TEST_START------------
movie-app-unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  # image: mcr.microsoft.com/dotnet/sdk:6.0-alpine-amd64
  extends:
    - .app-vars
  tags: 
    - test
  script:
    - echo "Running unit tests for app..."
    - dotnet test $SOURCE_CODE_PATH --no-restore # Or --no-build I don't know yet

filler-unit-test-job:
  stage: test
  # image: mcr.microsoft.com/dotnet/sdk:6.0-alpine-amd64
  extends:
    - .filler-vars
  tags:
    - test
  script:
    - echo "Running unit tests for database filler..."
    - dotnet test $SOURCE_CODE_PATH --no-restore

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  image: mcr.microsoft.com/dotnet/sdk:6.0-alpine-amd64
  tags:
    - test
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 10
    - echo "No lint issues found."
# ------------TEST_END------------

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
